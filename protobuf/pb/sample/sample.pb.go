// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sample/sample.proto

package samplepb

import (
	bytes "bytes"
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EnumType int32

const (
	SOMETHING_TYPE_A EnumType = 0
	SOMETHING_TYPE_B EnumType = 1
	SOMETHING_TYPE_C EnumType = 2
)

var EnumType_name = map[int32]string{
	0: "SOMETHING_TYPE_A",
	1: "SOMETHING_TYPE_B",
	2: "SOMETHING_TYPE_C",
}

var EnumType_value = map[string]int32{
	"SOMETHING_TYPE_A": 0,
	"SOMETHING_TYPE_B": 1,
	"SOMETHING_TYPE_C": 2,
}

func (EnumType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed182cfb5ecd7537, []int{0}
}

type NormalType struct {
	I32 int32   `protobuf:"varint,1,opt,name=i32,proto3" json:"i32,omitempty"`
	I64 int64   `protobuf:"varint,2,opt,name=i64,proto3" json:"i64,omitempty"`
	U32 uint32  `protobuf:"varint,3,opt,name=u32,proto3" json:"u32,omitempty"`
	U64 uint64  `protobuf:"varint,4,opt,name=u64,proto3" json:"u64,omitempty"`
	Fl  float32 `protobuf:"fixed32,5,opt,name=fl,proto3" json:"fl,omitempty"`
	Db  float64 `protobuf:"fixed64,6,opt,name=db,proto3" json:"db,omitempty"`
	Bl  bool    `protobuf:"varint,7,opt,name=bl,proto3" json:"bl,omitempty"`
	St  string  `protobuf:"bytes,8,opt,name=st,proto3" json:"st,omitempty"`
	Bt  []byte  `protobuf:"bytes,9,opt,name=bt,proto3" json:"bt,omitempty"`
}

func (m *NormalType) Reset()      { *m = NormalType{} }
func (*NormalType) ProtoMessage() {}
func (*NormalType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed182cfb5ecd7537, []int{0}
}
func (m *NormalType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NormalType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NormalType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NormalType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NormalType.Merge(m, src)
}
func (m *NormalType) XXX_Size() int {
	return m.Size()
}
func (m *NormalType) XXX_DiscardUnknown() {
	xxx_messageInfo_NormalType.DiscardUnknown(m)
}

var xxx_messageInfo_NormalType proto.InternalMessageInfo

func (m *NormalType) GetI32() int32 {
	if m != nil {
		return m.I32
	}
	return 0
}

func (m *NormalType) GetI64() int64 {
	if m != nil {
		return m.I64
	}
	return 0
}

func (m *NormalType) GetU32() uint32 {
	if m != nil {
		return m.U32
	}
	return 0
}

func (m *NormalType) GetU64() uint64 {
	if m != nil {
		return m.U64
	}
	return 0
}

func (m *NormalType) GetFl() float32 {
	if m != nil {
		return m.Fl
	}
	return 0
}

func (m *NormalType) GetDb() float64 {
	if m != nil {
		return m.Db
	}
	return 0
}

func (m *NormalType) GetBl() bool {
	if m != nil {
		return m.Bl
	}
	return false
}

func (m *NormalType) GetSt() string {
	if m != nil {
		return m.St
	}
	return ""
}

func (m *NormalType) GetBt() []byte {
	if m != nil {
		return m.Bt
	}
	return nil
}

type ExtensionType struct {
	Data   []string         `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Mp     map[string]int64 `protobuf:"bytes,2,rep,name=mp,proto3" json:"mp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Ts     *types.Timestamp `protobuf:"bytes,3,opt,name=ts,proto3" json:"ts,omitempty"`
	Struct *types.Struct    `protobuf:"bytes,4,opt,name=struct,proto3" json:"struct,omitempty"`
	Any    *types.Any       `protobuf:"bytes,5,opt,name=any,proto3" json:"any,omitempty"`
	// at least one of field should be used
	//
	// Types that are valid to be assigned to OneofData:
	//	*ExtensionType_I32
	//	*ExtensionType_St
	OneofData isExtensionType_OneofData `protobuf_oneof:"oneof_data"`
	Type      EnumType                  `protobuf:"varint,8,opt,name=type,proto3,enum=sample.EnumType" json:"type,omitempty"`
	Client    *Client                   `protobuf:"bytes,9,opt,name=client,proto3" json:"client,omitempty"`
}

func (m *ExtensionType) Reset()      { *m = ExtensionType{} }
func (*ExtensionType) ProtoMessage() {}
func (*ExtensionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed182cfb5ecd7537, []int{1}
}
func (m *ExtensionType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtensionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtensionType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtensionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtensionType.Merge(m, src)
}
func (m *ExtensionType) XXX_Size() int {
	return m.Size()
}
func (m *ExtensionType) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtensionType.DiscardUnknown(m)
}

var xxx_messageInfo_ExtensionType proto.InternalMessageInfo

type isExtensionType_OneofData interface {
	isExtensionType_OneofData()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ExtensionType_I32 struct {
	I32 int32 `protobuf:"varint,6,opt,name=i32,proto3,oneof"`
}
type ExtensionType_St struct {
	St string `protobuf:"bytes,7,opt,name=st,proto3,oneof"`
}

func (*ExtensionType_I32) isExtensionType_OneofData() {}
func (*ExtensionType_St) isExtensionType_OneofData()  {}

func (m *ExtensionType) GetOneofData() isExtensionType_OneofData {
	if m != nil {
		return m.OneofData
	}
	return nil
}

func (m *ExtensionType) GetData() []string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ExtensionType) GetMp() map[string]int64 {
	if m != nil {
		return m.Mp
	}
	return nil
}

func (m *ExtensionType) GetTs() *types.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *ExtensionType) GetStruct() *types.Struct {
	if m != nil {
		return m.Struct
	}
	return nil
}

func (m *ExtensionType) GetAny() *types.Any {
	if m != nil {
		return m.Any
	}
	return nil
}

func (m *ExtensionType) GetI32() int32 {
	if x, ok := m.GetOneofData().(*ExtensionType_I32); ok {
		return x.I32
	}
	return 0
}

func (m *ExtensionType) GetSt() string {
	if x, ok := m.GetOneofData().(*ExtensionType_St); ok {
		return x.St
	}
	return ""
}

func (m *ExtensionType) GetType() EnumType {
	if m != nil {
		return m.Type
	}
	return SOMETHING_TYPE_A
}

func (m *ExtensionType) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ExtensionType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ExtensionType_I32)(nil),
		(*ExtensionType_St)(nil),
	}
}

type Client struct {
	QuestionCode int64  `protobuf:"varint,1,opt,name=question_code,json=questionCode,proto3" json:"question_code,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Client) Reset()      { *m = Client{} }
func (*Client) ProtoMessage() {}
func (*Client) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed182cfb5ecd7537, []int{2}
}
func (m *Client) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Client) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Client.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Client) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Client.Merge(m, src)
}
func (m *Client) XXX_Size() int {
	return m.Size()
}
func (m *Client) XXX_DiscardUnknown() {
	xxx_messageInfo_Client.DiscardUnknown(m)
}

var xxx_messageInfo_Client proto.InternalMessageInfo

func (m *Client) GetQuestionCode() int64 {
	if m != nil {
		return m.QuestionCode
	}
	return 0
}

func (m *Client) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ManyClients struct {
	Client *Client `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
}

func (m *ManyClients) Reset()      { *m = ManyClients{} }
func (*ManyClients) ProtoMessage() {}
func (*ManyClients) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed182cfb5ecd7537, []int{3}
}
func (m *ManyClients) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManyClients) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManyClients.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManyClients) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManyClients.Merge(m, src)
}
func (m *ManyClients) XXX_Size() int {
	return m.Size()
}
func (m *ManyClients) XXX_DiscardUnknown() {
	xxx_messageInfo_ManyClients.DiscardUnknown(m)
}

var xxx_messageInfo_ManyClients proto.InternalMessageInfo

func (m *ManyClients) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

type Answer struct {
	Code   int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Answer string `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
}

func (m *Answer) Reset()      { *m = Answer{} }
func (*Answer) ProtoMessage() {}
func (*Answer) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed182cfb5ecd7537, []int{4}
}
func (m *Answer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Answer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Answer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Answer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Answer.Merge(m, src)
}
func (m *Answer) XXX_Size() int {
	return m.Size()
}
func (m *Answer) XXX_DiscardUnknown() {
	xxx_messageInfo_Answer.DiscardUnknown(m)
}

var xxx_messageInfo_Answer proto.InternalMessageInfo

func (m *Answer) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Answer) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

type ManyAnswers struct {
	Result *Answer `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *ManyAnswers) Reset()      { *m = ManyAnswers{} }
func (*ManyAnswers) ProtoMessage() {}
func (*ManyAnswers) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed182cfb5ecd7537, []int{5}
}
func (m *ManyAnswers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManyAnswers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManyAnswers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManyAnswers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManyAnswers.Merge(m, src)
}
func (m *ManyAnswers) XXX_Size() int {
	return m.Size()
}
func (m *ManyAnswers) XXX_DiscardUnknown() {
	xxx_messageInfo_ManyAnswers.DiscardUnknown(m)
}

var xxx_messageInfo_ManyAnswers proto.InternalMessageInfo

func (m *ManyAnswers) GetResult() *Answer {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterEnum("sample.EnumType", EnumType_name, EnumType_value)
	proto.RegisterType((*NormalType)(nil), "sample.NormalType")
	proto.RegisterType((*ExtensionType)(nil), "sample.ExtensionType")
	proto.RegisterMapType((map[string]int64)(nil), "sample.ExtensionType.MpEntry")
	proto.RegisterType((*Client)(nil), "sample.Client")
	proto.RegisterType((*ManyClients)(nil), "sample.ManyClients")
	proto.RegisterType((*Answer)(nil), "sample.Answer")
	proto.RegisterType((*ManyAnswers)(nil), "sample.ManyAnswers")
}

func init() { proto.RegisterFile("sample/sample.proto", fileDescriptor_ed182cfb5ecd7537) }

var fileDescriptor_ed182cfb5ecd7537 = []byte{
	// 732 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xcf, 0x4f, 0xdb, 0x48,
	0x14, 0xc7, 0x3d, 0x76, 0x62, 0x92, 0x09, 0x41, 0xd1, 0x80, 0x76, 0xbd, 0xd9, 0x5d, 0xaf, 0x95,
	0x45, 0xc8, 0x42, 0xbb, 0xce, 0xca, 0xfc, 0xd0, 0xaa, 0xb7, 0x04, 0x45, 0xa5, 0x6a, 0xa1, 0xd5,
	0x24, 0x3d, 0xb4, 0x97, 0xc8, 0x4e, 0x26, 0xc1, 0xc2, 0xbf, 0x6a, 0x8f, 0x69, 0x7d, 0xeb, 0xb9,
	0x27, 0xfe, 0x88, 0x1e, 0xfa, 0xa7, 0xf4, 0xc8, 0x91, 0x63, 0x09, 0x97, 0x1e, 0xf9, 0x13, 0xaa,
	0x99, 0xb1, 0x11, 0x04, 0xd4, 0x53, 0xde, 0x7b, 0xdf, 0xef, 0xbc, 0x37, 0xef, 0x33, 0x31, 0x5c,
	0x4f, 0x9d, 0x20, 0xf6, 0x49, 0x57, 0xfc, 0x58, 0x71, 0x12, 0xd1, 0x08, 0xa9, 0x22, 0x6b, 0xff,
	0x31, 0x8f, 0xa2, 0xb9, 0x4f, 0xba, 0xbc, 0xea, 0x66, 0xb3, 0x6e, 0x4a, 0x93, 0x6c, 0x42, 0x85,
	0xab, 0xfd, 0xd7, 0xb2, 0x4a, 0xbd, 0x80, 0xa4, 0xd4, 0x09, 0xe2, 0xc2, 0xf0, 0xdb, 0xb2, 0xc1,
	0x09, 0x73, 0x21, 0x75, 0x3e, 0x03, 0x08, 0x8f, 0xa3, 0x24, 0x70, 0xfc, 0x51, 0x1e, 0x13, 0xd4,
	0x82, 0x8a, 0xb7, 0x63, 0x6b, 0xc0, 0x00, 0x66, 0x15, 0xb3, 0x90, 0x57, 0xf6, 0x77, 0x35, 0xd9,
	0x00, 0xa6, 0x82, 0x59, 0xc8, 0x2a, 0xd9, 0x8e, 0xad, 0x29, 0x06, 0x30, 0x9b, 0x98, 0x85, 0xbc,
	0xb2, 0xbf, 0xab, 0x55, 0x0c, 0x60, 0x56, 0x30, 0x0b, 0xd1, 0x1a, 0x94, 0x67, 0xbe, 0x56, 0x35,
	0x80, 0x29, 0x63, 0x79, 0xe6, 0xb3, 0x7c, 0xea, 0x6a, 0xaa, 0x01, 0x4c, 0x80, 0xe5, 0xa9, 0xcb,
	0x72, 0xd7, 0xd7, 0x56, 0x0c, 0x60, 0xd6, 0xb0, 0xec, 0x72, 0x3d, 0xa5, 0x5a, 0xcd, 0x00, 0x66,
	0x1d, 0xcb, 0x29, 0xe5, 0x3a, 0xd5, 0xea, 0x06, 0x30, 0x57, 0xb1, 0xec, 0xd2, 0xce, 0xb9, 0x02,
	0x9b, 0x83, 0x0f, 0x94, 0x84, 0xa9, 0x17, 0x85, 0xfc, 0xa6, 0x08, 0x56, 0xa6, 0x0e, 0x75, 0x34,
	0x60, 0x28, 0x66, 0x1d, 0xf3, 0x18, 0xfd, 0x0b, 0xe5, 0x20, 0xd6, 0x64, 0x43, 0x31, 0x1b, 0xf6,
	0x9f, 0x56, 0x41, 0xf2, 0xde, 0x31, 0xeb, 0x28, 0x1e, 0x84, 0x34, 0xc9, 0xb1, 0x1c, 0xc4, 0x68,
	0x1b, 0xca, 0x34, 0xe5, 0x7b, 0x34, 0xec, 0xb6, 0x25, 0x18, 0x59, 0x25, 0x23, 0x6b, 0x54, 0x42,
	0xc4, 0x32, 0x4d, 0x51, 0x17, 0xaa, 0x82, 0x39, 0xdf, 0xb2, 0x61, 0xff, 0xfa, 0xc0, 0x3f, 0xe4,
	0x32, 0x2e, 0x6c, 0x68, 0x0b, 0x2a, 0x4e, 0x98, 0x73, 0x04, 0x0d, 0x7b, 0xe3, 0x81, 0xbb, 0x17,
	0xe6, 0x98, 0x19, 0x10, 0x12, 0xc4, 0x19, 0x9a, 0xea, 0xa1, 0x54, 0x32, 0x67, 0x34, 0x18, 0x9d,
	0xfa, 0xa1, 0xc4, 0x79, 0x6c, 0xc2, 0x0a, 0xcd, 0x63, 0xc2, 0x09, 0xad, 0xd9, 0xad, 0xdb, 0xdd,
	0xc2, 0x2c, 0x60, 0x6b, 0x61, 0xae, 0xa2, 0x2d, 0xa8, 0x4e, 0x7c, 0x8f, 0x84, 0x82, 0x5c, 0xc3,
	0x5e, 0x2b, 0x7d, 0x07, 0xbc, 0x8a, 0x0b, 0xb5, 0xbd, 0x07, 0x57, 0x0a, 0x0e, 0xec, 0xe9, 0x4e,
	0x49, 0xce, 0x1f, 0xbc, 0x8e, 0x59, 0x88, 0x36, 0x60, 0xf5, 0xcc, 0xf1, 0x33, 0x52, 0x3c, 0xb9,
	0x48, 0x9e, 0xc8, 0xff, 0x83, 0xfe, 0x2a, 0x84, 0x51, 0x48, 0xa2, 0xd9, 0x98, 0xc1, 0xee, 0xf4,
	0xa0, 0x2a, 0xda, 0xa2, 0xbf, 0x61, 0xf3, 0x5d, 0x46, 0x52, 0xea, 0x45, 0xe1, 0x78, 0x12, 0x4d,
	0x09, 0xef, 0xa6, 0xe0, 0xd5, 0xb2, 0x78, 0x10, 0x4d, 0xf9, 0x7b, 0x85, 0x4e, 0x20, 0xba, 0xd6,
	0x31, 0x8f, 0x3b, 0x7b, 0xb0, 0x71, 0xe4, 0x84, 0xb9, 0x68, 0x93, 0xde, 0xb9, 0x3e, 0xf8, 0xd9,
	0xf5, 0x3b, 0xbb, 0x50, 0xed, 0x85, 0xe9, 0x7b, 0x92, 0xb0, 0xa6, 0x77, 0x06, 0xf2, 0x18, 0xfd,
	0x02, 0x55, 0x87, 0xab, 0xc5, 0xa8, 0x22, 0x2b, 0x87, 0x89, 0x93, 0x7c, 0x58, 0x42, 0xd2, 0xcc,
	0x7f, 0x30, 0x4c, 0x18, 0x70, 0xa1, 0x6e, 0xbf, 0x80, 0xb5, 0x92, 0x32, 0xda, 0x80, 0xad, 0xe1,
	0xcb, 0xa3, 0xc1, 0xe8, 0xf0, 0xd9, 0xf1, 0xd3, 0xf1, 0xe8, 0xcd, 0xab, 0xc1, 0xb8, 0xd7, 0x92,
	0x1e, 0xa9, 0xf6, 0x5b, 0xe0, 0x91, 0xea, 0x41, 0x4b, 0xb6, 0x3f, 0x01, 0xd8, 0x1c, 0xf2, 0x39,
	0x43, 0x92, 0x9c, 0x79, 0x13, 0x82, 0xfe, 0x81, 0xb5, 0xd7, 0xa1, 0x93, 0xe4, 0xbd, 0xf4, 0x14,
	0x2d, 0x2d, 0xdc, 0x5e, 0xba, 0x53, 0x47, 0x42, 0xcf, 0xe1, 0xef, 0xec, 0x20, 0x49, 0x86, 0x34,
	0x21, 0x4e, 0xe0, 0x85, 0xf3, 0x5e, 0x7a, 0xca, 0xd6, 0xe2, 0x9f, 0x3c, 0x5a, 0x2f, 0x0f, 0xdc,
	0xc1, 0xda, 0xbe, 0x57, 0x2c, 0xd6, 0xef, 0x48, 0xff, 0x81, 0xbe, 0x7f, 0x71, 0xa5, 0x4b, 0x97,
	0x57, 0xba, 0x74, 0x73, 0xa5, 0x83, 0x8f, 0x0b, 0x1d, 0x7c, 0x59, 0xe8, 0xe0, 0xeb, 0x42, 0x07,
	0x17, 0x0b, 0x1d, 0x7c, 0x5b, 0xe8, 0xe0, 0xfb, 0x42, 0x97, 0x6e, 0x16, 0x3a, 0x38, 0xbf, 0xd6,
	0xa5, 0x8b, 0x6b, 0x5d, 0xba, 0xbc, 0xd6, 0x25, 0xb8, 0x39, 0x89, 0x02, 0x6b, 0xee, 0xd1, 0x93,
	0xcc, 0xb5, 0x4e, 0xbc, 0x24, 0x0a, 0x1c, 0xcf, 0xcf, 0xad, 0x79, 0xe4, 0x7b, 0x6e, 0x7a, 0xfb,
	0xff, 0xee, 0xab, 0x62, 0xcb, 0xb7, 0x35, 0x31, 0x3b, 0x76, 0x5d, 0x95, 0x6b, 0x3b, 0x3f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x6a, 0x01, 0x36, 0x49, 0xe9, 0x04, 0x00, 0x00,
}

func (x EnumType) String() string {
	s, ok := EnumType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *NormalType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NormalType)
	if !ok {
		that2, ok := that.(NormalType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.I32 != that1.I32 {
		return false
	}
	if this.I64 != that1.I64 {
		return false
	}
	if this.U32 != that1.U32 {
		return false
	}
	if this.U64 != that1.U64 {
		return false
	}
	if this.Fl != that1.Fl {
		return false
	}
	if this.Db != that1.Db {
		return false
	}
	if this.Bl != that1.Bl {
		return false
	}
	if this.St != that1.St {
		return false
	}
	if !bytes.Equal(this.Bt, that1.Bt) {
		return false
	}
	return true
}
func (this *ExtensionType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtensionType)
	if !ok {
		that2, ok := that.(ExtensionType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	if len(this.Mp) != len(that1.Mp) {
		return false
	}
	for i := range this.Mp {
		if this.Mp[i] != that1.Mp[i] {
			return false
		}
	}
	if !this.Ts.Equal(that1.Ts) {
		return false
	}
	if !this.Struct.Equal(that1.Struct) {
		return false
	}
	if !this.Any.Equal(that1.Any) {
		return false
	}
	if that1.OneofData == nil {
		if this.OneofData != nil {
			return false
		}
	} else if this.OneofData == nil {
		return false
	} else if !this.OneofData.Equal(that1.OneofData) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Client.Equal(that1.Client) {
		return false
	}
	return true
}
func (this *ExtensionType_I32) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtensionType_I32)
	if !ok {
		that2, ok := that.(ExtensionType_I32)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.I32 != that1.I32 {
		return false
	}
	return true
}
func (this *ExtensionType_St) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtensionType_St)
	if !ok {
		that2, ok := that.(ExtensionType_St)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.St != that1.St {
		return false
	}
	return true
}
func (this *Client) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Client)
	if !ok {
		that2, ok := that.(Client)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.QuestionCode != that1.QuestionCode {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ManyClients) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ManyClients)
	if !ok {
		that2, ok := that.(ManyClients)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Client.Equal(that1.Client) {
		return false
	}
	return true
}
func (this *Answer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Answer)
	if !ok {
		that2, ok := that.(Answer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Answer != that1.Answer {
		return false
	}
	return true
}
func (this *ManyAnswers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ManyAnswers)
	if !ok {
		that2, ok := that.(ManyAnswers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *NormalType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&samplepb.NormalType{")
	s = append(s, "I32: "+fmt.Sprintf("%#v", this.I32)+",\n")
	s = append(s, "I64: "+fmt.Sprintf("%#v", this.I64)+",\n")
	s = append(s, "U32: "+fmt.Sprintf("%#v", this.U32)+",\n")
	s = append(s, "U64: "+fmt.Sprintf("%#v", this.U64)+",\n")
	s = append(s, "Fl: "+fmt.Sprintf("%#v", this.Fl)+",\n")
	s = append(s, "Db: "+fmt.Sprintf("%#v", this.Db)+",\n")
	s = append(s, "Bl: "+fmt.Sprintf("%#v", this.Bl)+",\n")
	s = append(s, "St: "+fmt.Sprintf("%#v", this.St)+",\n")
	s = append(s, "Bt: "+fmt.Sprintf("%#v", this.Bt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExtensionType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&samplepb.ExtensionType{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	keysForMp := make([]string, 0, len(this.Mp))
	for k, _ := range this.Mp {
		keysForMp = append(keysForMp, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMp)
	mapStringForMp := "map[string]int64{"
	for _, k := range keysForMp {
		mapStringForMp += fmt.Sprintf("%#v: %#v,", k, this.Mp[k])
	}
	mapStringForMp += "}"
	if this.Mp != nil {
		s = append(s, "Mp: "+mapStringForMp+",\n")
	}
	if this.Ts != nil {
		s = append(s, "Ts: "+fmt.Sprintf("%#v", this.Ts)+",\n")
	}
	if this.Struct != nil {
		s = append(s, "Struct: "+fmt.Sprintf("%#v", this.Struct)+",\n")
	}
	if this.Any != nil {
		s = append(s, "Any: "+fmt.Sprintf("%#v", this.Any)+",\n")
	}
	if this.OneofData != nil {
		s = append(s, "OneofData: "+fmt.Sprintf("%#v", this.OneofData)+",\n")
	}
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Client != nil {
		s = append(s, "Client: "+fmt.Sprintf("%#v", this.Client)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExtensionType_I32) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&samplepb.ExtensionType_I32{` +
		`I32:` + fmt.Sprintf("%#v", this.I32) + `}`}, ", ")
	return s
}
func (this *ExtensionType_St) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&samplepb.ExtensionType_St{` +
		`St:` + fmt.Sprintf("%#v", this.St) + `}`}, ", ")
	return s
}
func (this *Client) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&samplepb.Client{")
	s = append(s, "QuestionCode: "+fmt.Sprintf("%#v", this.QuestionCode)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ManyClients) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&samplepb.ManyClients{")
	if this.Client != nil {
		s = append(s, "Client: "+fmt.Sprintf("%#v", this.Client)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Answer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&samplepb.Answer{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Answer: "+fmt.Sprintf("%#v", this.Answer)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ManyAnswers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&samplepb.ManyAnswers{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSample(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SampleServiceClient is the client API for SampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SampleServiceClient interface {
	// UnaryAsk is unary ask.
	UnaryAsk(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Answer, error)
	// ServerStreamingAsk is server side streaming.
	ServerStreamingAskManytimes(ctx context.Context, in *ManyClients, opts ...grpc.CallOption) (SampleService_ServerStreamingAskManytimesClient, error)
}

type sampleServiceClient struct {
	cc *grpc.ClientConn
}

func NewSampleServiceClient(cc *grpc.ClientConn) SampleServiceClient {
	return &sampleServiceClient{cc}
}

func (c *sampleServiceClient) UnaryAsk(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/sample.SampleService/UnaryAsk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) ServerStreamingAskManytimes(ctx context.Context, in *ManyClients, opts ...grpc.CallOption) (SampleService_ServerStreamingAskManytimesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SampleService_serviceDesc.Streams[0], "/sample.SampleService/ServerStreamingAskManytimes", opts...)
	if err != nil {
		return nil, err
	}
	x := &sampleServiceServerStreamingAskManytimesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SampleService_ServerStreamingAskManytimesClient interface {
	Recv() (*ManyAnswers, error)
	grpc.ClientStream
}

type sampleServiceServerStreamingAskManytimesClient struct {
	grpc.ClientStream
}

func (x *sampleServiceServerStreamingAskManytimesClient) Recv() (*ManyAnswers, error) {
	m := new(ManyAnswers)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SampleServiceServer is the server API for SampleService service.
type SampleServiceServer interface {
	// UnaryAsk is unary ask.
	UnaryAsk(context.Context, *Client) (*Answer, error)
	// ServerStreamingAsk is server side streaming.
	ServerStreamingAskManytimes(*ManyClients, SampleService_ServerStreamingAskManytimesServer) error
}

// UnimplementedSampleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSampleServiceServer struct {
}

func (*UnimplementedSampleServiceServer) UnaryAsk(ctx context.Context, req *Client) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryAsk not implemented")
}
func (*UnimplementedSampleServiceServer) ServerStreamingAskManytimes(req *ManyClients, srv SampleService_ServerStreamingAskManytimesServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingAskManytimes not implemented")
}

func RegisterSampleServiceServer(s *grpc.Server, srv SampleServiceServer) {
	s.RegisterService(&_SampleService_serviceDesc, srv)
}

func _SampleService_UnaryAsk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).UnaryAsk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample.SampleService/UnaryAsk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).UnaryAsk(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_ServerStreamingAskManytimes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ManyClients)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SampleServiceServer).ServerStreamingAskManytimes(m, &sampleServiceServerStreamingAskManytimesServer{stream})
}

type SampleService_ServerStreamingAskManytimesServer interface {
	Send(*ManyAnswers) error
	grpc.ServerStream
}

type sampleServiceServerStreamingAskManytimesServer struct {
	grpc.ServerStream
}

func (x *sampleServiceServerStreamingAskManytimesServer) Send(m *ManyAnswers) error {
	return x.ServerStream.SendMsg(m)
}

var _SampleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sample.SampleService",
	HandlerType: (*SampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryAsk",
			Handler:    _SampleService_UnaryAsk_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamingAskManytimes",
			Handler:       _SampleService_ServerStreamingAskManytimes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sample/sample.proto",
}

func (m *NormalType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NormalType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NormalType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bt) > 0 {
		i -= len(m.Bt)
		copy(dAtA[i:], m.Bt)
		i = encodeVarintSample(dAtA, i, uint64(len(m.Bt)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.St) > 0 {
		i -= len(m.St)
		copy(dAtA[i:], m.St)
		i = encodeVarintSample(dAtA, i, uint64(len(m.St)))
		i--
		dAtA[i] = 0x42
	}
	if m.Bl {
		i--
		if m.Bl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Db != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Db))))
		i--
		dAtA[i] = 0x31
	}
	if m.Fl != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Fl))))
		i--
		dAtA[i] = 0x2d
	}
	if m.U64 != 0 {
		i = encodeVarintSample(dAtA, i, uint64(m.U64))
		i--
		dAtA[i] = 0x20
	}
	if m.U32 != 0 {
		i = encodeVarintSample(dAtA, i, uint64(m.U32))
		i--
		dAtA[i] = 0x18
	}
	if m.I64 != 0 {
		i = encodeVarintSample(dAtA, i, uint64(m.I64))
		i--
		dAtA[i] = 0x10
	}
	if m.I32 != 0 {
		i = encodeVarintSample(dAtA, i, uint64(m.I32))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExtensionType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtensionType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtensionType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Client != nil {
		{
			size, err := m.Client.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSample(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Type != 0 {
		i = encodeVarintSample(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x40
	}
	if m.OneofData != nil {
		{
			size := m.OneofData.Size()
			i -= size
			if _, err := m.OneofData.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Any != nil {
		{
			size, err := m.Any.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSample(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Struct != nil {
		{
			size, err := m.Struct.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSample(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Ts != nil {
		{
			size, err := m.Ts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSample(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Mp) > 0 {
		for k := range m.Mp {
			v := m.Mp[k]
			baseI := i
			i = encodeVarintSample(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSample(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSample(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Data[iNdEx])
			copy(dAtA[i:], m.Data[iNdEx])
			i = encodeVarintSample(dAtA, i, uint64(len(m.Data[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ExtensionType_I32) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *ExtensionType_I32) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintSample(dAtA, i, uint64(m.I32))
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *ExtensionType_St) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *ExtensionType_St) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.St)
	copy(dAtA[i:], m.St)
	i = encodeVarintSample(dAtA, i, uint64(len(m.St)))
	i--
	dAtA[i] = 0x3a
	return len(dAtA) - i, nil
}
func (m *Client) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Client) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Client) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSample(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.QuestionCode != 0 {
		i = encodeVarintSample(dAtA, i, uint64(m.QuestionCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ManyClients) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManyClients) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManyClients) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Client != nil {
		{
			size, err := m.Client.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSample(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Answer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Answer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Answer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Answer) > 0 {
		i -= len(m.Answer)
		copy(dAtA[i:], m.Answer)
		i = encodeVarintSample(dAtA, i, uint64(len(m.Answer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintSample(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ManyAnswers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManyAnswers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManyAnswers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSample(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSample(dAtA []byte, offset int, v uint64) int {
	offset -= sovSample(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NormalType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.I32 != 0 {
		n += 1 + sovSample(uint64(m.I32))
	}
	if m.I64 != 0 {
		n += 1 + sovSample(uint64(m.I64))
	}
	if m.U32 != 0 {
		n += 1 + sovSample(uint64(m.U32))
	}
	if m.U64 != 0 {
		n += 1 + sovSample(uint64(m.U64))
	}
	if m.Fl != 0 {
		n += 5
	}
	if m.Db != 0 {
		n += 9
	}
	if m.Bl {
		n += 2
	}
	l = len(m.St)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	l = len(m.Bt)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	return n
}

func (m *ExtensionType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, s := range m.Data {
			l = len(s)
			n += 1 + l + sovSample(uint64(l))
		}
	}
	if len(m.Mp) > 0 {
		for k, v := range m.Mp {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSample(uint64(len(k))) + 1 + sovSample(uint64(v))
			n += mapEntrySize + 1 + sovSample(uint64(mapEntrySize))
		}
	}
	if m.Ts != nil {
		l = m.Ts.Size()
		n += 1 + l + sovSample(uint64(l))
	}
	if m.Struct != nil {
		l = m.Struct.Size()
		n += 1 + l + sovSample(uint64(l))
	}
	if m.Any != nil {
		l = m.Any.Size()
		n += 1 + l + sovSample(uint64(l))
	}
	if m.OneofData != nil {
		n += m.OneofData.Size()
	}
	if m.Type != 0 {
		n += 1 + sovSample(uint64(m.Type))
	}
	if m.Client != nil {
		l = m.Client.Size()
		n += 1 + l + sovSample(uint64(l))
	}
	return n
}

func (m *ExtensionType_I32) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSample(uint64(m.I32))
	return n
}
func (m *ExtensionType_St) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.St)
	n += 1 + l + sovSample(uint64(l))
	return n
}
func (m *Client) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QuestionCode != 0 {
		n += 1 + sovSample(uint64(m.QuestionCode))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	return n
}

func (m *ManyClients) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Client != nil {
		l = m.Client.Size()
		n += 1 + l + sovSample(uint64(l))
	}
	return n
}

func (m *Answer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSample(uint64(m.Code))
	}
	l = len(m.Answer)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	return n
}

func (m *ManyAnswers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovSample(uint64(l))
	}
	return n
}

func sovSample(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSample(x uint64) (n int) {
	return sovSample(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NormalType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NormalType{`,
		`I32:` + fmt.Sprintf("%v", this.I32) + `,`,
		`I64:` + fmt.Sprintf("%v", this.I64) + `,`,
		`U32:` + fmt.Sprintf("%v", this.U32) + `,`,
		`U64:` + fmt.Sprintf("%v", this.U64) + `,`,
		`Fl:` + fmt.Sprintf("%v", this.Fl) + `,`,
		`Db:` + fmt.Sprintf("%v", this.Db) + `,`,
		`Bl:` + fmt.Sprintf("%v", this.Bl) + `,`,
		`St:` + fmt.Sprintf("%v", this.St) + `,`,
		`Bt:` + fmt.Sprintf("%v", this.Bt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExtensionType) String() string {
	if this == nil {
		return "nil"
	}
	keysForMp := make([]string, 0, len(this.Mp))
	for k, _ := range this.Mp {
		keysForMp = append(keysForMp, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMp)
	mapStringForMp := "map[string]int64{"
	for _, k := range keysForMp {
		mapStringForMp += fmt.Sprintf("%v: %v,", k, this.Mp[k])
	}
	mapStringForMp += "}"
	s := strings.Join([]string{`&ExtensionType{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Mp:` + mapStringForMp + `,`,
		`Ts:` + strings.Replace(fmt.Sprintf("%v", this.Ts), "Timestamp", "types.Timestamp", 1) + `,`,
		`Struct:` + strings.Replace(fmt.Sprintf("%v", this.Struct), "Struct", "types.Struct", 1) + `,`,
		`Any:` + strings.Replace(fmt.Sprintf("%v", this.Any), "Any", "types.Any", 1) + `,`,
		`OneofData:` + fmt.Sprintf("%v", this.OneofData) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Client:` + strings.Replace(this.Client.String(), "Client", "Client", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExtensionType_I32) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExtensionType_I32{`,
		`I32:` + fmt.Sprintf("%v", this.I32) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExtensionType_St) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExtensionType_St{`,
		`St:` + fmt.Sprintf("%v", this.St) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Client) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Client{`,
		`QuestionCode:` + fmt.Sprintf("%v", this.QuestionCode) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ManyClients) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ManyClients{`,
		`Client:` + strings.Replace(this.Client.String(), "Client", "Client", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Answer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Answer{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Answer:` + fmt.Sprintf("%v", this.Answer) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ManyAnswers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ManyAnswers{`,
		`Result:` + strings.Replace(this.Result.String(), "Answer", "Answer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSample(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NormalType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NormalType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NormalType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I32", wireType)
			}
			m.I32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.I32 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I64", wireType)
			}
			m.I64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.I64 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field U32", wireType)
			}
			m.U32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.U32 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field U64", wireType)
			}
			m.U64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.U64 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fl", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Fl = float32(math.Float32frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Db", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Db = float64(math.Float64frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bl = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field St", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.St = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bt = append(m.Bt[:0], dAtA[iNdEx:postIndex]...)
			if m.Bt == nil {
				m.Bt = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtensionType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtensionType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtensionType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mp == nil {
				m.Mp = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSample
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSample
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSample
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSample(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSample
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Mp[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ts == nil {
				m.Ts = &types.Timestamp{}
			}
			if err := m.Ts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Struct", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Struct == nil {
				m.Struct = &types.Struct{}
			}
			if err := m.Struct.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Any", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Any == nil {
				m.Any = &types.Any{}
			}
			if err := m.Any.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I32", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OneofData = &ExtensionType_I32{v}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field St", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OneofData = &ExtensionType_St{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= EnumType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Client == nil {
				m.Client = &Client{}
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Client) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Client: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Client: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestionCode", wireType)
			}
			m.QuestionCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuestionCode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManyClients) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManyClients: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManyClients: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Client == nil {
				m.Client = &Client{}
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Answer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Answer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Answer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Answer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManyAnswers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManyAnswers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManyAnswers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &Answer{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSample(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSample
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSample
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSample
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSample
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSample(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSample
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSample = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSample   = fmt.Errorf("proto: integer overflow")
)
