// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sample/sample.proto

package samplepb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import strconv "strconv"
import strings "strings"
import reflect "reflect"
import encoding_binary "encoding/binary"
import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package
type Something1Type int32

const (
	SOMETHING_TYPE_A Something1Type = 0
	SOMETHING_TYPE_B Something1Type = 1
	SOMETHING_TYPE_C Something1Type = 2
)

var Something1Type_name = map[int32]string{
	0: "SOMETHING_TYPE_A",
	1: "SOMETHING_TYPE_B",
	2: "SOMETHING_TYPE_C",
}
var Something1Type_value = map[string]int32{
	"SOMETHING_TYPE_A": 0,
	"SOMETHING_TYPE_B": 1,
	"SOMETHING_TYPE_C": 2,
}

func (Something1Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_sample_e197e17c6f8b1d87, []int{0}
}

type SampleBase struct {
	SampleId string `protobuf:"bytes,1,opt,name=sample_id,json=sampleId,proto3" json:"sample_id,omitempty"`
	Time     int64  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	// Types that are valid to be assigned to SampleData:
	//	*SampleBase_Category1
	//	*SampleBase_Category2
	SampleData isSampleBase_SampleData `protobuf_oneof:"sample_data"`
}

func (m *SampleBase) Reset()      { *m = SampleBase{} }
func (*SampleBase) ProtoMessage() {}
func (*SampleBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_sample_e197e17c6f8b1d87, []int{0}
}
func (m *SampleBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SampleBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SampleBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SampleBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SampleBase.Merge(dst, src)
}
func (m *SampleBase) XXX_Size() int {
	return m.Size()
}
func (m *SampleBase) XXX_DiscardUnknown() {
	xxx_messageInfo_SampleBase.DiscardUnknown(m)
}

var xxx_messageInfo_SampleBase proto.InternalMessageInfo

type isSampleBase_SampleData interface {
	isSampleBase_SampleData()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SampleBase_Category1 struct {
	Category1 *Category1Sample `protobuf:"bytes,101,opt,name=category1,oneof"`
}
type SampleBase_Category2 struct {
	Category2 *Category2Sample `protobuf:"bytes,102,opt,name=category2,oneof"`
}

func (*SampleBase_Category1) isSampleBase_SampleData() {}
func (*SampleBase_Category2) isSampleBase_SampleData() {}

func (m *SampleBase) GetSampleData() isSampleBase_SampleData {
	if m != nil {
		return m.SampleData
	}
	return nil
}

func (m *SampleBase) GetSampleId() string {
	if m != nil {
		return m.SampleId
	}
	return ""
}

func (m *SampleBase) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *SampleBase) GetCategory1() *Category1Sample {
	if x, ok := m.GetSampleData().(*SampleBase_Category1); ok {
		return x.Category1
	}
	return nil
}

func (m *SampleBase) GetCategory2() *Category2Sample {
	if x, ok := m.GetSampleData().(*SampleBase_Category2); ok {
		return x.Category2
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SampleBase) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SampleBase_OneofMarshaler, _SampleBase_OneofUnmarshaler, _SampleBase_OneofSizer, []interface{}{
		(*SampleBase_Category1)(nil),
		(*SampleBase_Category2)(nil),
	}
}

func _SampleBase_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SampleBase)
	// sample_data
	switch x := m.SampleData.(type) {
	case *SampleBase_Category1:
		_ = b.EncodeVarint(101<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Category1); err != nil {
			return err
		}
	case *SampleBase_Category2:
		_ = b.EncodeVarint(102<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Category2); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SampleBase.SampleData has unexpected type %T", x)
	}
	return nil
}

func _SampleBase_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SampleBase)
	switch tag {
	case 101: // sample_data.category1
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Category1Sample)
		err := b.DecodeMessage(msg)
		m.SampleData = &SampleBase_Category1{msg}
		return true, err
	case 102: // sample_data.category2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Category2Sample)
		err := b.DecodeMessage(msg)
		m.SampleData = &SampleBase_Category2{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SampleBase_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SampleBase)
	// sample_data
	switch x := m.SampleData.(type) {
	case *SampleBase_Category1:
		s := proto.Size(x.Category1)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SampleBase_Category2:
		s := proto.Size(x.Category2)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Category1Sample struct {
	Something1 *Something1 `protobuf:"bytes,1,opt,name=something1" json:"something1,omitempty"`
	Something2 *Something2 `protobuf:"bytes,2,opt,name=something2" json:"something2,omitempty"`
	Client     *Client     `protobuf:"bytes,3,opt,name=client" json:"client,omitempty"`
}

func (m *Category1Sample) Reset()      { *m = Category1Sample{} }
func (*Category1Sample) ProtoMessage() {}
func (*Category1Sample) Descriptor() ([]byte, []int) {
	return fileDescriptor_sample_e197e17c6f8b1d87, []int{1}
}
func (m *Category1Sample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Category1Sample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Category1Sample.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Category1Sample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Category1Sample.Merge(dst, src)
}
func (m *Category1Sample) XXX_Size() int {
	return m.Size()
}
func (m *Category1Sample) XXX_DiscardUnknown() {
	xxx_messageInfo_Category1Sample.DiscardUnknown(m)
}

var xxx_messageInfo_Category1Sample proto.InternalMessageInfo

func (m *Category1Sample) GetSomething1() *Something1 {
	if m != nil {
		return m.Something1
	}
	return nil
}

func (m *Category1Sample) GetSomething2() *Something2 {
	if m != nil {
		return m.Something2
	}
	return nil
}

func (m *Category1Sample) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

type Category2Sample struct {
	Something1 *Something1 `protobuf:"bytes,1,opt,name=something1" json:"something1,omitempty"`
	AId        uint64      `protobuf:"varint,3,opt,name=a_id,json=aId,proto3" json:"a_id,omitempty"`
	BId        float64     `protobuf:"fixed64,4,opt,name=b_id,json=bId,proto3" json:"b_id,omitempty"`
	SName      string      `protobuf:"bytes,5,opt,name=s_name,json=sName,proto3" json:"s_name,omitempty"`
	BFlag      bool        `protobuf:"varint,9,opt,name=b_flag,json=bFlag,proto3" json:"b_flag,omitempty"`
}

func (m *Category2Sample) Reset()      { *m = Category2Sample{} }
func (*Category2Sample) ProtoMessage() {}
func (*Category2Sample) Descriptor() ([]byte, []int) {
	return fileDescriptor_sample_e197e17c6f8b1d87, []int{2}
}
func (m *Category2Sample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Category2Sample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Category2Sample.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Category2Sample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Category2Sample.Merge(dst, src)
}
func (m *Category2Sample) XXX_Size() int {
	return m.Size()
}
func (m *Category2Sample) XXX_DiscardUnknown() {
	xxx_messageInfo_Category2Sample.DiscardUnknown(m)
}

var xxx_messageInfo_Category2Sample proto.InternalMessageInfo

func (m *Category2Sample) GetSomething1() *Something1 {
	if m != nil {
		return m.Something1
	}
	return nil
}

func (m *Category2Sample) GetAId() uint64 {
	if m != nil {
		return m.AId
	}
	return 0
}

func (m *Category2Sample) GetBId() float64 {
	if m != nil {
		return m.BId
	}
	return 0
}

func (m *Category2Sample) GetSName() string {
	if m != nil {
		return m.SName
	}
	return ""
}

func (m *Category2Sample) GetBFlag() bool {
	if m != nil {
		return m.BFlag
	}
	return false
}

type Something1 struct {
	Id   uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UId  uint32         `protobuf:"varint,2,opt,name=u_id,json=uId,proto3" json:"u_id,omitempty"`
	Type Something1Type `protobuf:"varint,3,opt,name=type,proto3,enum=samplepb.Something1Type" json:"type,omitempty"`
	UiId uint64         `protobuf:"varint,4,opt,name=ui_id,json=uiId,proto3" json:"ui_id,omitempty"`
}

func (m *Something1) Reset()      { *m = Something1{} }
func (*Something1) ProtoMessage() {}
func (*Something1) Descriptor() ([]byte, []int) {
	return fileDescriptor_sample_e197e17c6f8b1d87, []int{3}
}
func (m *Something1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Something1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Something1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Something1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Something1.Merge(dst, src)
}
func (m *Something1) XXX_Size() int {
	return m.Size()
}
func (m *Something1) XXX_DiscardUnknown() {
	xxx_messageInfo_Something1.DiscardUnknown(m)
}

var xxx_messageInfo_Something1 proto.InternalMessageInfo

func (m *Something1) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Something1) GetUId() uint32 {
	if m != nil {
		return m.UId
	}
	return 0
}

func (m *Something1) GetType() Something1Type {
	if m != nil {
		return m.Type
	}
	return SOMETHING_TYPE_A
}

func (m *Something1) GetUiId() uint64 {
	if m != nil {
		return m.UiId
	}
	return 0
}

type Something2 struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PTime int64  `protobuf:"varint,2,opt,name=p_time,json=pTime,proto3" json:"p_time,omitempty"`
}

func (m *Something2) Reset()      { *m = Something2{} }
func (*Something2) ProtoMessage() {}
func (*Something2) Descriptor() ([]byte, []int) {
	return fileDescriptor_sample_e197e17c6f8b1d87, []int{4}
}
func (m *Something2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Something2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Something2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Something2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Something2.Merge(dst, src)
}
func (m *Something2) XXX_Size() int {
	return m.Size()
}
func (m *Something2) XXX_DiscardUnknown() {
	xxx_messageInfo_Something2.DiscardUnknown(m)
}

var xxx_messageInfo_Something2 proto.InternalMessageInfo

func (m *Something2) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Something2) GetPTime() int64 {
	if m != nil {
		return m.PTime
	}
	return 0
}

type Client struct {
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Age    uint32 `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`
	Height uint32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *Client) Reset()      { *m = Client{} }
func (*Client) ProtoMessage() {}
func (*Client) Descriptor() ([]byte, []int) {
	return fileDescriptor_sample_e197e17c6f8b1d87, []int{5}
}
func (m *Client) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Client) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Client.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Client) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Client.Merge(dst, src)
}
func (m *Client) XXX_Size() int {
	return m.Size()
}
func (m *Client) XXX_DiscardUnknown() {
	xxx_messageInfo_Client.DiscardUnknown(m)
}

var xxx_messageInfo_Client proto.InternalMessageInfo

func (m *Client) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Client) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *Client) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterType((*SampleBase)(nil), "samplepb.SampleBase")
	proto.RegisterType((*Category1Sample)(nil), "samplepb.Category1Sample")
	proto.RegisterType((*Category2Sample)(nil), "samplepb.Category2Sample")
	proto.RegisterType((*Something1)(nil), "samplepb.Something1")
	proto.RegisterType((*Something2)(nil), "samplepb.Something2")
	proto.RegisterType((*Client)(nil), "samplepb.Client")
	proto.RegisterEnum("samplepb.Something1Type", Something1Type_name, Something1Type_value)
}
func (x Something1Type) String() string {
	s, ok := Something1Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SampleBase) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SampleBase)
	if !ok {
		that2, ok := that.(SampleBase)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SampleId != that1.SampleId {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if that1.SampleData == nil {
		if this.SampleData != nil {
			return false
		}
	} else if this.SampleData == nil {
		return false
	} else if !this.SampleData.Equal(that1.SampleData) {
		return false
	}
	return true
}
func (this *SampleBase_Category1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SampleBase_Category1)
	if !ok {
		that2, ok := that.(SampleBase_Category1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Category1.Equal(that1.Category1) {
		return false
	}
	return true
}
func (this *SampleBase_Category2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SampleBase_Category2)
	if !ok {
		that2, ok := that.(SampleBase_Category2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Category2.Equal(that1.Category2) {
		return false
	}
	return true
}
func (this *Category1Sample) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Category1Sample)
	if !ok {
		that2, ok := that.(Category1Sample)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Something1.Equal(that1.Something1) {
		return false
	}
	if !this.Something2.Equal(that1.Something2) {
		return false
	}
	if !this.Client.Equal(that1.Client) {
		return false
	}
	return true
}
func (this *Category2Sample) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Category2Sample)
	if !ok {
		that2, ok := that.(Category2Sample)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Something1.Equal(that1.Something1) {
		return false
	}
	if this.AId != that1.AId {
		return false
	}
	if this.BId != that1.BId {
		return false
	}
	if this.SName != that1.SName {
		return false
	}
	if this.BFlag != that1.BFlag {
		return false
	}
	return true
}
func (this *Something1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Something1)
	if !ok {
		that2, ok := that.(Something1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.UId != that1.UId {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.UiId != that1.UiId {
		return false
	}
	return true
}
func (this *Something2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Something2)
	if !ok {
		that2, ok := that.(Something2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.PTime != that1.PTime {
		return false
	}
	return true
}
func (this *Client) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Client)
	if !ok {
		that2, ok := that.(Client)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Age != that1.Age {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	return true
}
func (this *SampleBase) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&samplepb.SampleBase{")
	s = append(s, "SampleId: "+fmt.Sprintf("%#v", this.SampleId)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	if this.SampleData != nil {
		s = append(s, "SampleData: "+fmt.Sprintf("%#v", this.SampleData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SampleBase_Category1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&samplepb.SampleBase_Category1{` +
		`Category1:` + fmt.Sprintf("%#v", this.Category1) + `}`}, ", ")
	return s
}
func (this *SampleBase_Category2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&samplepb.SampleBase_Category2{` +
		`Category2:` + fmt.Sprintf("%#v", this.Category2) + `}`}, ", ")
	return s
}
func (this *Category1Sample) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&samplepb.Category1Sample{")
	if this.Something1 != nil {
		s = append(s, "Something1: "+fmt.Sprintf("%#v", this.Something1)+",\n")
	}
	if this.Something2 != nil {
		s = append(s, "Something2: "+fmt.Sprintf("%#v", this.Something2)+",\n")
	}
	if this.Client != nil {
		s = append(s, "Client: "+fmt.Sprintf("%#v", this.Client)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Category2Sample) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&samplepb.Category2Sample{")
	if this.Something1 != nil {
		s = append(s, "Something1: "+fmt.Sprintf("%#v", this.Something1)+",\n")
	}
	s = append(s, "AId: "+fmt.Sprintf("%#v", this.AId)+",\n")
	s = append(s, "BId: "+fmt.Sprintf("%#v", this.BId)+",\n")
	s = append(s, "SName: "+fmt.Sprintf("%#v", this.SName)+",\n")
	s = append(s, "BFlag: "+fmt.Sprintf("%#v", this.BFlag)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Something1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&samplepb.Something1{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "UId: "+fmt.Sprintf("%#v", this.UId)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "UiId: "+fmt.Sprintf("%#v", this.UiId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Something2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&samplepb.Something2{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "PTime: "+fmt.Sprintf("%#v", this.PTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Client) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&samplepb.Client{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Age: "+fmt.Sprintf("%#v", this.Age)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSample(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SampleBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SampleBase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SampleId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.SampleId)))
		i += copy(dAtA[i:], m.SampleId)
	}
	if m.Time != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.Time))
	}
	if m.SampleData != nil {
		nn1, err := m.SampleData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *SampleBase_Category1) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Category1 != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.Category1.Size()))
		n2, err := m.Category1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *SampleBase_Category2) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Category2 != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.Category2.Size()))
		n3, err := m.Category2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Category1Sample) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Category1Sample) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Something1 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.Something1.Size()))
		n4, err := m.Something1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Something2 != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.Something2.Size()))
		n5, err := m.Something2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Client != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.Client.Size()))
		n6, err := m.Client.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *Category2Sample) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Category2Sample) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Something1 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.Something1.Size()))
		n7, err := m.Something1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.AId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.AId))
	}
	if m.BId != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BId))))
		i += 8
	}
	if len(m.SName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.SName)))
		i += copy(dAtA[i:], m.SName)
	}
	if m.BFlag {
		dAtA[i] = 0x48
		i++
		if m.BFlag {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Something1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Something1) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.Id))
	}
	if m.UId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.UId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.Type))
	}
	if m.UiId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.UiId))
	}
	return i, nil
}

func (m *Something2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Something2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.PTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.PTime))
	}
	return i, nil
}

func (m *Client) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Client) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSample(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Age != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.Age))
	}
	if m.Height != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSample(dAtA, i, uint64(m.Height))
	}
	return i, nil
}

func encodeVarintSample(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SampleBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SampleId)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovSample(uint64(m.Time))
	}
	if m.SampleData != nil {
		n += m.SampleData.Size()
	}
	return n
}

func (m *SampleBase_Category1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Category1 != nil {
		l = m.Category1.Size()
		n += 2 + l + sovSample(uint64(l))
	}
	return n
}
func (m *SampleBase_Category2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Category2 != nil {
		l = m.Category2.Size()
		n += 2 + l + sovSample(uint64(l))
	}
	return n
}
func (m *Category1Sample) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Something1 != nil {
		l = m.Something1.Size()
		n += 1 + l + sovSample(uint64(l))
	}
	if m.Something2 != nil {
		l = m.Something2.Size()
		n += 1 + l + sovSample(uint64(l))
	}
	if m.Client != nil {
		l = m.Client.Size()
		n += 1 + l + sovSample(uint64(l))
	}
	return n
}

func (m *Category2Sample) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Something1 != nil {
		l = m.Something1.Size()
		n += 1 + l + sovSample(uint64(l))
	}
	if m.AId != 0 {
		n += 1 + sovSample(uint64(m.AId))
	}
	if m.BId != 0 {
		n += 9
	}
	l = len(m.SName)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	if m.BFlag {
		n += 2
	}
	return n
}

func (m *Something1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSample(uint64(m.Id))
	}
	if m.UId != 0 {
		n += 1 + sovSample(uint64(m.UId))
	}
	if m.Type != 0 {
		n += 1 + sovSample(uint64(m.Type))
	}
	if m.UiId != 0 {
		n += 1 + sovSample(uint64(m.UiId))
	}
	return n
}

func (m *Something2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	if m.PTime != 0 {
		n += 1 + sovSample(uint64(m.PTime))
	}
	return n
}

func (m *Client) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSample(uint64(l))
	}
	if m.Age != 0 {
		n += 1 + sovSample(uint64(m.Age))
	}
	if m.Height != 0 {
		n += 1 + sovSample(uint64(m.Height))
	}
	return n
}

func sovSample(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSample(x uint64) (n int) {
	return sovSample(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SampleBase) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SampleBase{`,
		`SampleId:` + fmt.Sprintf("%v", this.SampleId) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`SampleData:` + fmt.Sprintf("%v", this.SampleData) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SampleBase_Category1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SampleBase_Category1{`,
		`Category1:` + strings.Replace(fmt.Sprintf("%v", this.Category1), "Category1Sample", "Category1Sample", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SampleBase_Category2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SampleBase_Category2{`,
		`Category2:` + strings.Replace(fmt.Sprintf("%v", this.Category2), "Category2Sample", "Category2Sample", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Category1Sample) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Category1Sample{`,
		`Something1:` + strings.Replace(fmt.Sprintf("%v", this.Something1), "Something1", "Something1", 1) + `,`,
		`Something2:` + strings.Replace(fmt.Sprintf("%v", this.Something2), "Something2", "Something2", 1) + `,`,
		`Client:` + strings.Replace(fmt.Sprintf("%v", this.Client), "Client", "Client", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Category2Sample) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Category2Sample{`,
		`Something1:` + strings.Replace(fmt.Sprintf("%v", this.Something1), "Something1", "Something1", 1) + `,`,
		`AId:` + fmt.Sprintf("%v", this.AId) + `,`,
		`BId:` + fmt.Sprintf("%v", this.BId) + `,`,
		`SName:` + fmt.Sprintf("%v", this.SName) + `,`,
		`BFlag:` + fmt.Sprintf("%v", this.BFlag) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Something1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Something1{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`UId:` + fmt.Sprintf("%v", this.UId) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`UiId:` + fmt.Sprintf("%v", this.UiId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Something2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Something2{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`PTime:` + fmt.Sprintf("%v", this.PTime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Client) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Client{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Age:` + fmt.Sprintf("%v", this.Age) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSample(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SampleBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SampleBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SampleBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SampleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Category1Sample{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SampleData = &SampleBase_Category1{v}
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Category2Sample{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SampleData = &SampleBase_Category2{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Category1Sample) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Category1Sample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Category1Sample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Something1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Something1 == nil {
				m.Something1 = &Something1{}
			}
			if err := m.Something1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Something2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Something2 == nil {
				m.Something2 = &Something2{}
			}
			if err := m.Something2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Client == nil {
				m.Client = &Client{}
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Category2Sample) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Category2Sample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Category2Sample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Something1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Something1 == nil {
				m.Something1 = &Something1{}
			}
			if err := m.Something1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AId", wireType)
			}
			m.AId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BId", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BId = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BFlag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BFlag = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Something1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Something1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Something1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UId", wireType)
			}
			m.UId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Something1Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UiId", wireType)
			}
			m.UiId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UiId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Something2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Something2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Something2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PTime", wireType)
			}
			m.PTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Client) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Client: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Client: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSample(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSample
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSample
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSample
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSample(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSample = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSample   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("sample/sample.proto", fileDescriptor_sample_e197e17c6f8b1d87) }

var fileDescriptor_sample_e197e17c6f8b1d87 = []byte{
	// 538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xb1, 0x8e, 0xd3, 0x4c,
	0x10, 0xf6, 0xc6, 0x8e, 0x75, 0x99, 0xd3, 0xdd, 0xef, 0x7f, 0xef, 0x40, 0x46, 0x48, 0xab, 0xc8,
	0xa2, 0xb0, 0x10, 0x32, 0x3a, 0x83, 0x84, 0x28, 0xc9, 0xe9, 0x8e, 0x73, 0xc1, 0x81, 0x36, 0x69,
	0xa8, 0xac, 0x75, 0xbc, 0x71, 0x56, 0xb2, 0x63, 0x2b, 0xb6, 0x8b, 0x74, 0x3c, 0x02, 0x3d, 0x0f,
	0x00, 0xcf, 0x41, 0x45, 0x99, 0xf2, 0x4a, 0xe2, 0x34, 0x94, 0xf7, 0x08, 0xc8, 0xeb, 0x84, 0xf8,
	0x20, 0x54, 0x54, 0xde, 0xfd, 0x66, 0xbe, 0x99, 0x6f, 0x76, 0x3e, 0xc3, 0x49, 0xce, 0x92, 0x2c,
	0xe6, 0x4f, 0x9b, 0x8f, 0x93, 0xcd, 0xd3, 0x22, 0xc5, 0x07, 0xcd, 0x2d, 0x0b, 0xac, 0xaf, 0x08,
	0x60, 0x28, 0x2f, 0x03, 0x96, 0x73, 0xfc, 0x10, 0x7a, 0x4d, 0xc8, 0x17, 0xa1, 0x89, 0xfa, 0xc8,
	0xee, 0xd1, 0x4d, 0xae, 0x17, 0x62, 0x0c, 0x5a, 0x21, 0x12, 0x6e, 0x76, 0xfa, 0xc8, 0x56, 0xa9,
	0x3c, 0xe3, 0x97, 0xd0, 0x1b, 0xb3, 0x82, 0x47, 0xe9, 0x7c, 0x71, 0x66, 0xf2, 0x3e, 0xb2, 0x0f,
	0xdd, 0x07, 0xce, 0xb6, 0xba, 0x73, 0xbe, 0x0d, 0x35, 0x2d, 0xae, 0x14, 0xba, 0xcb, 0x6e, 0x53,
	0x5d, 0x73, 0xf2, 0x37, 0xaa, 0xfb, 0x27, 0xd5, 0x1d, 0x1c, 0xc1, 0xe1, 0x46, 0x66, 0xc8, 0x0a,
	0x66, 0x7d, 0x46, 0xf0, 0xdf, 0x6f, 0xad, 0xf0, 0x73, 0x80, 0x3c, 0x4d, 0x78, 0x31, 0x15, 0xb3,
	0xe8, 0x4c, 0x8e, 0x72, 0xe8, 0x9e, 0xee, 0xca, 0x0f, 0x7f, 0xc5, 0x68, 0x2b, 0xef, 0x0e, 0xcb,
	0x95, 0x83, 0xee, 0x67, 0xb9, 0x2d, 0x96, 0x8b, 0x6d, 0xd0, 0xc7, 0xb1, 0xe0, 0xb3, 0xc2, 0x54,
	0x25, 0xc3, 0x68, 0x8d, 0x21, 0x71, 0xba, 0x89, 0x5b, 0x9f, 0x5a, 0x4a, 0xdd, 0x7f, 0x52, 0xfa,
	0x3f, 0x68, 0xac, 0x5e, 0x52, 0xdd, 0x51, 0xa3, 0x2a, 0xf3, 0xc2, 0x1a, 0x0a, 0x6a, 0x48, 0xeb,
	0x23, 0x1b, 0x51, 0x35, 0xf0, 0x42, 0x7c, 0x0f, 0xf4, 0xdc, 0x9f, 0xb1, 0x84, 0x9b, 0x5d, 0xb9,
	0xcc, 0x6e, 0x7e, 0xcd, 0x12, 0x5e, 0xc3, 0x81, 0x3f, 0x89, 0x59, 0x64, 0xf6, 0xfa, 0xc8, 0x3e,
	0xa0, 0xdd, 0xe0, 0x32, 0x66, 0x91, 0x35, 0x07, 0xd8, 0x75, 0xc3, 0xc7, 0xd0, 0xd9, 0x98, 0x40,
	0xa3, 0x1d, 0x21, 0xcb, 0x97, 0x75, 0xf9, 0xfa, 0x55, 0x8e, 0xa8, 0x5a, 0x7a, 0x21, 0x7e, 0x02,
	0x5a, 0xb1, 0xc8, 0xb8, 0x14, 0x71, 0xec, 0x9a, 0xfb, 0x44, 0x8f, 0x16, 0x19, 0xa7, 0x32, 0x0b,
	0x9f, 0x40, 0xb7, 0x14, 0x5b, 0x81, 0x1a, 0xd5, 0x4a, 0xe1, 0x85, 0xd6, 0x8b, 0x56, 0x4f, 0xb7,
	0xb6, 0x98, 0x54, 0xdb, 0x58, 0x4f, 0x9e, 0x6b, 0xb1, 0x99, 0xdf, 0x32, 0x5e, 0x37, 0x1b, 0x89,
	0x84, 0x5b, 0x97, 0xa0, 0x37, 0x8f, 0xbb, 0x97, 0x64, 0x80, 0xca, 0x22, 0xbe, 0xd5, 0xca, 0x22,
	0x8e, 0xef, 0x83, 0x3e, 0xe5, 0x22, 0x9a, 0x36, 0x4b, 0x3a, 0xa2, 0x9b, 0xdb, 0x63, 0x0a, 0xc7,
	0x77, 0xd5, 0xe2, 0x53, 0x30, 0x86, 0x6f, 0xdf, 0x5c, 0x8c, 0xae, 0xbc, 0xeb, 0xd7, 0xfe, 0xe8,
	0xfd, 0xbb, 0x0b, 0xff, 0x95, 0xa1, 0xec, 0x41, 0x07, 0x06, 0xda, 0x83, 0x9e, 0x1b, 0x9d, 0x41,
	0xb0, 0x5c, 0x11, 0xe5, 0x66, 0x45, 0x94, 0xdb, 0x15, 0x41, 0x1f, 0x2a, 0x82, 0xbe, 0x54, 0x04,
	0x7d, 0xab, 0x08, 0x5a, 0x56, 0x04, 0x7d, 0xaf, 0x08, 0xfa, 0x51, 0x11, 0xe5, 0xb6, 0x22, 0xe8,
	0xe3, 0x9a, 0x28, 0xcb, 0x35, 0x51, 0x6e, 0xd6, 0x44, 0x81, 0x47, 0xe3, 0x34, 0x71, 0x22, 0x51,
	0x4c, 0xcb, 0xc0, 0x99, 0x8a, 0x79, 0x9a, 0x30, 0x11, 0x2f, 0x9c, 0x28, 0x8d, 0x45, 0x90, 0x37,
	0x3f, 0x6e, 0x50, 0x4e, 0x06, 0x7a, 0x63, 0x9b, 0x40, 0x97, 0xc8, 0xb3, 0x9f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x18, 0xa5, 0xe2, 0x8e, 0xe1, 0x03, 0x00, 0x00,
}
