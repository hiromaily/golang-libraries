syntax = "proto3";

package sample;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

option java_package = "com.github.hiromaily.golibs.protobuf";
option java_outer_classname = "Sample";
option go_package = "samplepb";

enum EnumType {
  SOMETHING_TYPE_A = 0;
  SOMETHING_TYPE_B = 1;
  SOMETHING_TYPE_C = 2;
}

message NormalType {
  int32 i32 = 1;
  int64 i64 = 2;
  uint32 u32 = 3;
  uint64 u64 = 4;
  float fl = 5;
  double db = 6;
  bool bl = 7;
  string st = 8;
  bytes bt = 9;
}

message ExtensionType {
  repeated string data = 1;
  map<string, int64> mp = 2;
  google.protobuf.Timestamp ts = 3;
  google.protobuf.Struct struct = 4;
  google.protobuf.Any any = 5;
  // at least one of field should be used
  oneof oneof_data {
    int32 i32 = 6;
    string st = 7;
  }
  EnumType type = 8;
  Client client = 9;
}

message Client {
  int64 question_code = 1;
  string name = 2;
}

message ManyClients {
  repeated Client clients = 1;
}

message Answer {
  int64 code = 1;
  string answer = 2;
}

message ManyAnswers {
  repeated Answer answers = 1;
}

// Sample is the sample service.
service SampleService {
  // UnaryAsk is unary ask.
  rpc UnaryAsk(Client) returns (Answer) {}
  // ServerStreamingRespondManytimes is server side streaming. 1 to many
  rpc ServerStreamingRespondManytimes(ManyClients) returns (stream Answer) {}
  // ClientStreamingAskManytimes is client side streaming.
  rpc ClientStreamingAskManytimes(stream Client) returns (ManyAnswers) {}
  // BidirectionalStreamingEcho is bidi streaming.
  rpc BidirectionalStreaming(stream Client) returns (stream Answer) {}
}
